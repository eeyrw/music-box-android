# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.4.1)

if(${ANDROID_ABI} STREQUAL "x86_64")
    enable_language(ASM_NASM)

    #set(asm_SRCS src/main/cpp/test.asm)
elseif(${ANDROID_ABI} STREQUAL "arm64-v8a")
    enable_language(ASM)

    #set(asm_SRCS src/main/cpp/arm_test.s)
endif()

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

add_library( # Sets the name of the library.
             native-lib

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
             native-lib.cpp
        MusicBoxEngine.cpp
        ./WaveTableSynthesizer/AlgorithmTest.c
        ./WaveTableSynthesizer/EnvelopeTable.c        
        ./WaveTableSynthesizer/Player.c
        ./WaveTableSynthesizer/score.c
        ./WaveTableSynthesizer/SynthCore.c
        ./WaveTableSynthesizer/WaveTable_Celesta_C5.c
        ./WaveTableSynthesizer/WaveTable_Celesta_C6.c     
        )

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib

              # Specifies the name of the NDK library that
              # you want CMake to locate.
              log )

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
                       native-lib
        oboe
                       # Links the target library to the log library
                       # included in the NDK.
                       ${log-lib})

# Set the path to the Oboe directory.
set(OBOE_DIR ../../../../oboe)

# Add the Oboe library as a subdirectory in your project.
# add_subdirectory tells CMake to look in this directory to
# compile oboe source files using oboe's CMake file.
# ./oboe specifies where the compiled binaries will be stored
add_subdirectory (${OBOE_DIR} ./oboe)

# Specify the path to the Oboe header files.
# This allows targets compiled with this CMake (application code)
# to see public Oboe headers, in order to access its API.
include_directories (${OBOE_DIR}/include ./shared ./debug-utils ./WaveTableSynthesizer)